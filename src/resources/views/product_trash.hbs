{{> header}}
<div class="content-wrapper">
    <div class="container-fluid">
        <div class="row" style="max-width: 100%; display: contents;">
            <ul class="search-customer"
                style="list-style: none; display:flex; justify-content: space-between; align-items: center;">
                <div class="">
                    <button class="btn btn-danger btnDeleteAll" style="float: left;">Xóa mục đã chọn</button>
                    <button class="btn btn-primary btnRevertAll ml-3">Khôi phục mục đã
                        chọn</button>
                </div>
            </ul>
            </li>
            </ul>
        </div>

        <div class="row" style="display: contents;">
            <div class="col-lg-6" style="max-width: 100%;">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex align-items">
                            <span style="cursor: pointer;" class="d-inline-block mr-3" tabindex="0"
                                data-toggle="tooltip" title="Trở về">
                                <a href="/product-manage">
                                    <ion-icon name="arrow-undo-outline"></ion-icon>
                                </a>
                            </span>
                            <h5 class="card-title">Khôi phục sản phẩm</h5>
                        </div>
                        <div class="table-responsive">
                            <table id="myTable" class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>
                                            <div class="checkbox">
                                                <input type="checkbox" class="check" id="checkAll">
                                            </div>
                                        </th>
                                        <th scope="col">Mã sản phẩm</th>
                                        <th scope="col">Tên sản phẩm</th>
                                        <th scope="col">Nhóm sản phẩm</th>
                                        <th scope="col">Năm đánh giá</th>
                                        <th scope="col">Chủ thể</th>
                                        <th scope="col">Ghi chú</th>
                                        <th scope="col">Hành động</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {{#each viewData.data}}
                                    <tr>
                                        <td>
                                            <div class="">
                                                <div class="checkbox">
                                                    <input type="checkbox" class="check" data-idCheckBox="{{this._id}}">
                                                </div>
                                            </div>
                                        </td>
                                        <td>{{this.product_code}}</td>
                                        <td>{{this.product_name}}</td>
                                        <td>{{this.productGroup_name}}</td>
                                        <td>{{this.product_year}}</td>
                                        <td>{{this.customer_name}}</td>
                                        <td>{{this.product_note}}</td>
                                        <td style="display: flex;">
                                            <div class="action_center">
                                                <button data-toggle="modal" data-target="#exampleModal{{this._id}}"
                                                    style="background-color: transparent;border: none;cursor: pointer;">
                                                    <span class="d-inline-block" tabindex="0" data-toggle="tooltip"
                                                        title="Khôi phục: {{this.product_name}}">
                                                        <ion-icon name="sync-outline"
                                                            style="color: white; font-size: 18px;" id="icon_revert"
                                                            data-id="{{this._id}}"></ion-icon>
                                                    </span>
                                                </button>
                                            </div>
                                            <div class="delete_action">
                                                <span class="d-inline-block" tabindex="0" data-toggle="tooltip"
                                                    title="Xóa vĩnh viễn">
                                                    <button class="delete-button"
                                                        style="background-color: transparent;border: none;">
                                                        <ion-icon id="icon_moveToTrash" name="trash-outline"
                                                            data-id="{{this._id}}">
                                                        </ion-icon>
                                                    </button>
                                                </span>
                                            </div>
                                        </td>
                                    </tr>
                                    {{else}}
                                    <tr>
                                        <td colspan="9" class="text-center">Không tìm thấy từ khoá nào</td>
                                    </tr>
                                    {{/each }}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div><!--End Row-->
        </div>
        <!-- End container-fluid-->
    </div><!--End content-wrapper-->
    {{> footer}}

    <script>

        //Function of selection box
        var x, i, j, l, ll, selElmnt, a, b, c;
        /*look for any elements with the class "custom-select":*/
        x = document.getElementsByClassName("custom-select");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /*for each element, create a new DIV that will act as the selected item:*/
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x[i].appendChild(a);
            /*for each element, create a new DIV that will contain the option list:*/
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /*for each option in the original select element,
                create a new DIV that will act as an option item:*/
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /*when an item is clicked, update the original select box,
                    and the selected item:*/
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function (e) {
                /*when the select box is clicked, close any other select boxes,
                and open/close the current select box:*/
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
            /*a function that will close all select boxes in the document,
            except the current select box:*/
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }
        /*if the user clicks anywhere outside the select box,
        then close all select boxes:*/
        document.addEventListener("click", closeAllSelect);


        //Function of selection box year test
        var x, i, j, l, ll, selElmnt, a, b, c;
        /*look for any elements with the class "custom-select":*/
        x = document.getElementsByClassName("custom-select-year");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /*for each element, create a new DIV that will act as the selected item:*/
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            // Set default selected option to current year
            var currentYear = new Date().getFullYear();
            for (var k = 0; k < ll; k++) {
                if (selElmnt.options[k].value == currentYear) {
                    selElmnt.selectedIndex = k;
                    a.innerHTML = selElmnt.options[k].innerHTML;
                    break;
                }
            }
            if (a.innerHTML === "") {
                a.innerHTML = selElmnt.options[0].innerHTML;
            }
            x[i].appendChild(a);
            /*for each element, create a new DIV that will contain the option list:*/
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /*for each option in the original select element,
                create a new DIV that will act as an option item:*/
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /*when an item is clicked, update the original select box,
                    and the selected item:*/
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function (e) {
                /*when the select box is clicked, close any other select boxes,
                and open/close the current select box:*/
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
            /*a function that will close all select boxes in the document,
            except the current select box:*/
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }
        /*if the user clicks anywhere outside the select box,
        then close all select boxes:*/
        document.addEventListener("click", closeAllSelect);
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/helpers/custom-product.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() {
            dataLayer.push(arguments);
        }
        gtag('js', new Date());
        gtag('config', 'UA-56159088-1');
        // checkbox All
        $("#checkAll").click(function (e) {
            $(".check").prop('checked', $(this).prop('checked'));
        });
    </script>
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>


    <script>
        const btnReverts = document.querySelectorAll("#icon_revert")
        const btnTrash = document.querySelectorAll("#icon_moveToTrash");
        //remove One
        for (let btn of btnTrash) {
            btn.addEventListener("click", (event) => {
                const isRemove = window.confirm("Are u sure deleted ?")
                if (isRemove) {
                    const id = event.target.dataset.id
                    fetch(`/product-manage/remove/${id}`, {
                        method: "DELETE"
                    })
                    alert("Xóa thành công")
                    window.location.reload()
                }
            })
        }
        //revertOne
        for (let btnRevert of btnReverts) {
            btnRevert.addEventListener("click", async (event) => {
                const isRemove = window.confirm("Khôi phục đối tượng này ?")
                if (isRemove) {
                    const id = event.target.dataset.id
                    await fetch(`/product-manage/revert/${id}`, {
                        method: "PATCH"
                    })
                    window.location.reload()
                }
            })
        }
        //removeAll
        const btnsCheck = document.querySelectorAll(".check")
        const btnDeleteAll = document.querySelector(".btnDeleteAll")
        btnDeleteAll.addEventListener("click", async (e) => {
            const isConfirmDeleteByCheckbox = window.confirm("Xác nhận xóa những đối tượng bạn đã chọn ?")
            if (isConfirmDeleteByCheckbox) {
                for (let btnCheck of btnsCheck) {
                    if (btnCheck.checked) {
                        const id = btnCheck.dataset.idcheckbox
                        fetch(`/product-manage/remove/${id}`, {
                            method: "DELETE"
                        })
                    }
                }
                alert("Xóa thành công!")
                window.location.reload()
            }
        })
        //RevertByCheckBox
        const btnRevertAll = document.querySelector(".btnRevertAll")
        btnRevertAll.addEventListener("click", async (e) => {
            const isConfirmRevertByCheckbox = window.confirm("Xác nhận khôi phục những đối tượng bạn đã chọn ?")
            if (isConfirmRevertByCheckbox) {
                for (let btnCheck of btnsCheck) {
                    if (btnCheck.checked) {
                        const id = btnCheck.dataset.idcheckbox
                        fetch(`/product-manage/revert/${id}`, {
                            method: "PATCH"
                        })
                    }
                }
                alert("Khôi phục thành công!")
                window.location.reload()
            }
        })
    </script>