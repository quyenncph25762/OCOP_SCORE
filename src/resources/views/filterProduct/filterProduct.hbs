{{> header}}
<div class="content-wrapper">
    <div class="container-fluid">
        <div class="row" style="max-width: 100%; display: contents;">
            <ul class="search-customer"
                style="list-style: none; display:flex; justify-content: space-between; align-items: center;">
                <div class="import_customer_button"
                    style="list-style: none; display:flex; justify-content: space-between; align-items: center;">
                    <button class="btn btn-success btnSubmitFile d-flex align-items-center btnDisabled">
                        <ion-icon name="mail-open-outline" style="font-size: 16px;"></ion-icon>
                        <p class="ml-2 mb-0">Gửi link tải hồ sơ</p>
                    </button>
                </div>
            </ul>
            </li>
            </ul>
        </div>
    </div>
    <!-- End container-fluid-->
    <div class="row" style="display: contents;">
        <div class="col-lg-6" style="max-width: 100%;">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items">
                        <h5 class="card-title">Danh sách sản phẩm</h5>
                    </div>

                    <div class="table-responsive">
                        <table id="myTable" class="table table-hover">
                            <thead>
                                <div class="row">
                                    <div class="col-sm-3">
                                        <label for="">Năm đánh giá</label>
                                        <select name="" id="YearFilter" class="form-control">
                                            <option value="" style="color: white;">Tất cả</option>
                                            {{#each Review}}
                                            <option value="{{this._id}}" style="color: white;" {{#ifCond this.status
                                                0}}disabled{{/ifCond}}>{{this.yearName}}</option>
                                            {{/each}}
                                        </select>
                                    </div>
                                    <div class="col-sm-3">
                                        <label for="">Nhóm sản phẩm</label>
                                        <select name="" id="productGroupFilter" class="form-control">
                                            <option value="" style="color: white;">Tất cả</option>
                                            {{#each ProductGroup}}
                                            <option value="{{this._id}}" style="color: white;" {{#ifCond this.IsActive
                                                0}}disabled{{/ifCond}}>
                                                {{this.Name}}</option>
                                            {{/each}}
                                        </select>
                                    </div>
                                </div>
                                <tr>
                                    <th {{#ifCond viewData.data.length 0}}hidden{{/ifCond}}>
                                        <div class="checkbox">
                                            <input type="checkbox" class="check" id="checkAll">
                                        </div>
                                    </th>
                                    <th scope="col" hidden>Id</th>
                                    <th scope="col" hidden>IdYear</th>
                                    <th scope="col">Tên sản phẩm</th>
                                    <th scope="col">Nhóm sản phẩm</th>
                                    <th scope="col">Rank OCOP</th>
                                    <th scope="col">Năm đánh giá</th>
                                    <th scope="col">Chủ thể</th>
                                </tr>
                            </thead>
                            <tbody>
                                {{#each viewData.data}}
                                <tr>
                                    <td>
                                        <div class="">
                                            <div class="checkbox">
                                                <input type="checkbox" class="check" data-idCheckBox="{{this._id}}">
                                            </div>
                                        </div>
                                    </td>
                                    <td hidden>{{this.ProductGroup_id}}</td>
                                    <td hidden>{{this.ProductYearId}}</td>
                                    <td>{{this.Name}}</td>
                                    {{#ifCond productgroup_IsDeleted 0}}
                                    <td>{{this.productGroup_name}}</td>
                                    {{else}}
                                    <td style="color: rgb(236, 236, 118);">Không xác định</td>
                                    {{/ifCond}}
                                    {{#ifCond this.rankOcop NULL}}
                                    <td>Chưa xếp hạng</td>
                                    {{else}}
                                    <td>{{this.rankOcop}}</td>
                                    {{/ifCond}}

                                    {{#ifCond yearreview_IsDeleted 0}}
                                    <td>{{this.yearName}}</td>
                                    {{else}}
                                    <td style="color: rgb(236, 236, 118);">Không xác định</td>
                                    {{/ifCond}}

                                    {{#ifCond customer_IsDeleted 0}}
                                    <td>{{this.customer_name}}</td>
                                    {{else}}
                                    <td style="color: rgb(236, 236, 118);">Không xác định</td>
                                    {{/ifCond}}
                                </tr>
                                {{else}}
                                <tr>
                                    <td colspan="9" class="text-center">Không tìm thấy từ khoá nào</td>
                                </tr>
                                {{/each }}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div><!--End Row-->
    </div>

    <!--End content-wrapper-->
    {{> footer}}

    <script>

        //Function of selection box
        var x, i, j, l, ll, selElmnt, a, b, c;
        /*look for any elements with the class "custom-select":*/
        x = document.getElementsByClassName("custom-select");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /*for each element, create a new DIV that will act as the selected item:*/
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
            x[i].appendChild(a);
            /*for each element, create a new DIV that will contain the option list:*/
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /*for each option in the original select element,
                create a new DIV that will act as an option item:*/
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /*when an item is clicked, update the original select box,
                    and the selected item:*/
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function (e) {
                /*when the select box is clicked, close any other select boxes,
                and open/close the current select box:*/
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
            /*a function that will close all select boxes in the document,
            except the current select box:*/
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }
        /*if the user clicks anywhere outside the select box,
        then close all select boxes:*/
        document.addEventListener("click", closeAllSelect);


        //Function of selection box year test
        var x, i, j, l, ll, selElmnt, a, b, c;
        /*look for any elements with the class "custom-select":*/
        x = document.getElementsByClassName("custom-select-year");
        l = x.length;
        for (i = 0; i < l; i++) {
            selElmnt = x[i].getElementsByTagName("select")[0];
            ll = selElmnt.length;
            /*for each element, create a new DIV that will act as the selected item:*/
            a = document.createElement("DIV");
            a.setAttribute("class", "select-selected");
            // Set default selected option to current year
            var currentYear = new Date().getFullYear();
            for (var k = 0; k < ll; k++) {
                if (selElmnt.options[k].value == currentYear) {
                    selElmnt.selectedIndex = k;
                    a.innerHTML = selElmnt.options[k].innerHTML;
                    break;
                }
            }
            if (a.innerHTML === "") {
                a.innerHTML = selElmnt.options[0].innerHTML;
            }
            x[i].appendChild(a);
            /*for each element, create a new DIV that will contain the option list:*/
            b = document.createElement("DIV");
            b.setAttribute("class", "select-items select-hide");
            for (j = 1; j < ll; j++) {
                /*for each option in the original select element,
                create a new DIV that will act as an option item:*/
                c = document.createElement("DIV");
                c.innerHTML = selElmnt.options[j].innerHTML;
                c.addEventListener("click", function (e) {
                    /*when an item is clicked, update the original select box,
                    and the selected item:*/
                    var y, i, k, s, h, sl, yl;
                    s = this.parentNode.parentNode.getElementsByTagName("select")[0];
                    sl = s.length;
                    h = this.parentNode.previousSibling;
                    for (i = 0; i < sl; i++) {
                        if (s.options[i].innerHTML == this.innerHTML) {
                            s.selectedIndex = i;
                            h.innerHTML = this.innerHTML;
                            y = this.parentNode.getElementsByClassName("same-as-selected");
                            yl = y.length;
                            for (k = 0; k < yl; k++) {
                                y[k].removeAttribute("class");
                            }
                            this.setAttribute("class", "same-as-selected");
                            break;
                        }
                    }
                    h.click();
                });
                b.appendChild(c);
            }
            x[i].appendChild(b);
            a.addEventListener("click", function (e) {
                /*when the select box is clicked, close any other select boxes,
                and open/close the current select box:*/
                e.stopPropagation();
                closeAllSelect(this);
                this.nextSibling.classList.toggle("select-hide");
                this.classList.toggle("select-arrow-active");
            });
        }
        function closeAllSelect(elmnt) {
            /*a function that will close all select boxes in the document,
            except the current select box:*/
            var x, y, i, xl, yl, arrNo = [];
            x = document.getElementsByClassName("select-items");
            y = document.getElementsByClassName("select-selected");
            xl = x.length;
            yl = y.length;
            for (i = 0; i < yl; i++) {
                if (elmnt == y[i]) {
                    arrNo.push(i)
                } else {
                    y[i].classList.remove("select-arrow-active");
                }
            }
            for (i = 0; i < xl; i++) {
                if (arrNo.indexOf(i)) {
                    x[i].classList.add("select-hide");
                }
            }
        }
        /*if the user clicks anywhere outside the select box,
        then close all select boxes:*/
        document.addEventListener("click", closeAllSelect);
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/assets/js/custom.js"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() {
            dataLayer.push(arguments);
        }
        gtag('js', new Date());
        gtag('config', 'UA-56159088-1');
        // checkbox All
        $("#checkAll").click(function (e) {
            $(".check").prop('checked', $(this).prop('checked'));
        });
    </script>
    <script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>

    {{!-- actions --}}
    <script>
        //sendFile
        const btnsCheck = document.querySelectorAll(".check")
        const btnSubmitFile = document.querySelector(".btnSubmitFile")
        const btnDisabled = document.querySelector(".btnDisabled")
        // khong checked thi se disabled nut
        let count = 0
        const checkBtnDisabled = () => {
            if (count === 0) {
                btnDisabled.setAttribute("disabled", true)
            } else {
                btnDisabled.removeAttribute("disabled")
            }
        }
        for (let checked of btnsCheck) {
            checkBtnDisabled()
            checked.addEventListener("click", (e) => {
                if (checked.checked) {
                    count++
                } else {
                    count--
                }
                checkBtnDisabled()
            })
        }
        btnSubmitFile.addEventListener("click", async (e) => {
            const isConfirmDeleteByCheckbox = window.confirm("Xác nhận xóa những đối tượng bạn đã chọn ?")
            if (isConfirmDeleteByCheckbox) {
                for (let btnCheck of btnsCheck) {
                    if (btnCheck.checked) {
                        const id = btnCheck.dataset.idcheckbox
                        fetch(`/product-manage/removeToTrash/${id}`, {
                            method: "DELETE"
                        })
                    }
                }
                alert("Gửi file thành công!")
                window.location.reload()
            }
        })
    </script>

    {{!-- filter --}}
    <script>

    </script>